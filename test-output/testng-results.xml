<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="0" total="7" passed="5">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="33511" started-at="2019-01-19T04:11:24Z" finished-at="2019-01-19T04:11:58Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="33511" started-at="2019-01-19T04:11:24Z" finished-at="2019-01-19T04:11:58Z">
      <class name="testcases.ExecuteTest">
        <test-method status="PASS" signature="setUp(java.lang.String)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="setUp" is-config="true" duration-ms="9873" started-at="2019-01-19T04:11:24Z" finished-at="2019-01-19T04:11:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="5" started-at="2019-01-19T04:11:34Z" finished-at="2019-01-19T04:11:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.launchApplication()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="PASS" signature="launchApplication()[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="launchApplication" duration-ms="3434" started-at="2019-01-19T04:11:34Z" finished-at="2019-01-19T04:11:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- launchApplication -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="605" started-at="2019-01-19T04:11:38Z" finished-at="2019-01-19T04:11:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=launchApplication status=SUCCESS method=ExecuteTest.launchApplication()[pri:0, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="1" started-at="2019-01-19T04:11:38Z" finished-at="2019-01-19T04:11:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.testFail()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="FAIL" signature="testFail()[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="testFail" duration-ms="2" started-at="2019-01-19T04:11:38Z" finished-at="2019-01-19T04:11:38Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertFalse(Assert.java:65)
at org.testng.Assert.assertFalse(Assert.java:75)
at testcases.ExecuteTest.testFail(ExecuteTest.java:208)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.TestNG.privateMain(TestNG.java:1354)
at org.testng.TestNG.main(TestNG.java:1323)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFail -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="468" started-at="2019-01-19T04:11:38Z" finished-at="2019-01-19T04:11:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testFail status=FAILURE method=ExecuteTest.testFail()[pri:0, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="1" started-at="2019-01-19T04:11:39Z" finished-at="2019-01-19T04:11:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.testSkip()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="SKIP" signature="testSkip()[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="testSkip" duration-ms="1" started-at="2019-01-19T04:11:39Z" finished-at="2019-01-19T04:11:39Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[This test got skipped as it was not ready to be executed]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: This test got skipped as it was not ready to be executed
at testcases.ExecuteTest.testSkip(ExecuteTest.java:213)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.TestNG.privateMain(TestNG.java:1354)
at org.testng.TestNG.main(TestNG.java:1323)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSkip -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="1" started-at="2019-01-19T04:11:39Z" finished-at="2019-01-19T04:11:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSkip status=SKIP method=ExecuteTest.testSkip()[pri:0, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="1" started-at="2019-01-19T04:11:39Z" finished-at="2019-01-19T04:11:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.login()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="PASS" signature="login()[pri:1, instance:testcases.ExecuteTest@5ba23b66]" name="login" duration-ms="6583" started-at="2019-01-19T04:11:39Z" finished-at="2019-01-19T04:11:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="394" started-at="2019-01-19T04:11:45Z" finished-at="2019-01-19T04:11:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=ExecuteTest.login()[pri:1, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="2" started-at="2019-01-19T04:11:46Z" finished-at="2019-01-19T04:11:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.enterFlightDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="PASS" signature="enterFlightDetails()[pri:2, instance:testcases.ExecuteTest@5ba23b66]" name="enterFlightDetails" duration-ms="3126" started-at="2019-01-19T04:11:46Z" finished-at="2019-01-19T04:11:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- enterFlightDetails -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="375" started-at="2019-01-19T04:11:49Z" finished-at="2019-01-19T04:11:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=enterFlightDetails status=SUCCESS method=ExecuteTest.enterFlightDetails()[pri:2, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="1" started-at="2019-01-19T04:11:49Z" finished-at="2019-01-19T04:11:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.reserveAFlight()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="PASS" signature="reserveAFlight()[pri:3, instance:testcases.ExecuteTest@5ba23b66]" name="reserveAFlight" duration-ms="2184" started-at="2019-01-19T04:11:49Z" finished-at="2019-01-19T04:11:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- reserveAFlight -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="348" started-at="2019-01-19T04:11:51Z" finished-at="2019-01-19T04:11:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=reserveAFlight status=SUCCESS method=ExecuteTest.reserveAFlight()[pri:3, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="getTestMethodName(java.lang.reflect.Method)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="getTestMethodName" is-config="true" duration-ms="1" started-at="2019-01-19T04:11:52Z" finished-at="2019-01-19T04:11:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testcases.ExecuteTest.enterPersonalDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTestMethodName -->
        <test-method status="PASS" signature="enterPersonalDetails()[pri:4, instance:testcases.ExecuteTest@5ba23b66]" name="enterPersonalDetails" duration-ms="2588" started-at="2019-01-19T04:11:52Z" finished-at="2019-01-19T04:11:54Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- enterPersonalDetails -->
        <test-method status="PASS" signature="generateReport(org.testng.ITestResult)[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="generateReport" is-config="true" duration-ms="363" started-at="2019-01-19T04:11:54Z" finished-at="2019-01-19T04:11:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=enterPersonalDetails status=SUCCESS method=ExecuteTest.enterPersonalDetails()[pri:4, instance:testcases.ExecuteTest@5ba23b66] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReport -->
        <test-method status="PASS" signature="closeDriver()[pri:0, instance:testcases.ExecuteTest@5ba23b66]" name="closeDriver" is-config="true" duration-ms="3119" started-at="2019-01-19T04:11:55Z" finished-at="2019-01-19T04:11:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeDriver -->
      </class> <!-- testcases.ExecuteTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
